local function push_to_map(map_obj, coords, blockname)
  local temp_obj = map_obj

  if not temp_obj[coords.x] then
    temp_obj[coords.x] = {}
  end
  if not temp_obj[coords.x][coords.y] then
    temp_obj[coords.x][coords.y] = {}
  end

  temp_obj[coords.x][coords.y][coords.z] = blockname

  return temp_obj
end

local function contains_key(table, key)
  return table[key] ~= nil
end

function read_list(path)
  local file = io.open(path, "r")

  local contents = {}
  for line in file:lines() do
    if not (line:len() == 0 or line:sub(1, 1) == "#") then
      table.insert(contents, line)
    end
  end

  file:close()

  return contents
end

function write_standard_file(path, obj)
  local file = io.open(path, "r")
  local file_contents = {}
  for line in file:lines() do
    table.insert(file_contents, line)
  end
  file:close()

  file = io.open(path, "w")
  for _, line in ipairs(file_contents) do
    if line:len() == 0 or line:sub(1, 1) == "#" then
      file:write(line)
    else
      local key, value_raw, type = read_standard_line(line)

      file:write(key..":")
      if contains_key(obj, key) then
        if type == "VECTOR" then
          file:write(obj[key].x..","..obj[key].y..","..obj[key].z)
        elseif type == "NUM" then
          file:write(tostring(obj[key]))
        elseif type == "BOOL" then
          if obj[key] then
            file:write("true")
          else
            file:write("false")
          end
        elseif type == "VECTOR_LIST" then
          if #obj[key] >= 1 then
            local strings = {}
            for _,v in pairs(obj[key]) do
              table.insert(strings, v.x..","..v.y..","..v.z)
            end
            file:write(table.concat(strings, ";"))
          else
            file:write("0,0,0")
          end
        end
      end
      file:write("<<"..type)
    end

    file:write("\n")
  end
  file:close()
end

function read_standard_file(path)
  local file = io.open(path, "r")

  data_tmp = {}

  for line in file:lines() do
    (function()
    if line:len() == 0 or line:sub(1, 1) == "#" then
      return
    end

    local key, value_raw, type = read_standard_line(line)

    if type == "VECTOR" then
      data_tmp[key] = vector_from_string(value_raw)
    elseif type == "NUM" then
      data_tmp[key] = tonumber(value_raw)
    elseif type == "BOOL" then
      data_tmp[key] = value_raw == "true"
    elseif type == "VECTOR_LIST" then
      data_tmp[key] = vector_list_from_string(value_raw)
    else
      error("Unknown datatype " .. type)
    end
    end)()
  end

  file:close()

  return data_tmp
end

function read_standard_line(line)
  local key, value_raw, type
  for w in line:gmatch("([^:]+)") do
    if not key then
      key = w
    elseif not value_raw then
      for p in w:gmatch("([^<<]+)") do
        if not value_raw then
          value_raw = p
        elseif not type then
          type = p
        end
      end
    end
  end
  
  return key, value_raw, type
end

function vector_from_string(string)
  local x, y, z
  for sub in string:gmatch("([^,]+)") do
    if not x then
      x = tonumber(sub)
    elseif not y then
      y = tonumber(sub)
    elseif not z then
      z = tonumber(sub)
    end
  end

  return vector.new(x, y, z)
end

function vector_list_from_string(string)
  local list = {}
  for sub in string:gmatch("([^;]+)") do
    table.insert(list, vector_from_string(sub))
  end

  return list
end

function read_map(path)
  local file = io.open(path, "r")

  local map_obj = {}

  for line in file:lines() do
    local coords_raw, blockname
    for sub in line:gmatch("([^>]+)") do
      if not coords_raw then
        coords_raw = sub
      elseif not blockname then
        blockname = sub
      end
    end

    local coords = vector_from_string(coords_raw)

    map_obj = push_to_map(map_obj, coords, blockname)
  end

  file:close()

  return map_obj
end

function write_map(path, map_obj)
  local file = io.open(path, "w")

  for x in pairs(map_obj) do
    for y in pairs(map_obj[x]) do
      for z in pairs(map_obj[x][y]) do
        file:write(x..","..y..","..z..">"..map_obj[x][y][z])
        file:write("\n")
      end
    end
  end

  file:close()
end